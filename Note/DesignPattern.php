<?php 
/*
============================================== 设计模式 ==============================================

1.工厂模式  
 
 将不同的操作封装成不同的类,需要的时候选择性的实例化 返回一个对象

2.策略者模式

根据不同的类型参数传入不同的对象进入

3.单一职责原则 

每个类都有不同的职责,而一个类只负责单一的任务,避免程序的耦合性,避免修改一个类造成很多隐形的错误

4.面向对象

强内聚,松耦合
依赖倒转其实可以说是面向对象设计的标志,用那种语言来编写程序不重要,如果编写是考虑的都是如何针对抽象编程二不是针对细节编程,及程序中所有的依赖关系都是终止与抽象类或者接口,那就是面向对象的设计,繁殖就是过程化的设计了

5.装饰者模式










父类有自己的方法和属性 子类中也可加上自己所特有的属性和方法。----也就实现了多态

=============================================  抽象类  ===========================================
抽象方法必须是Public的
抽象方法必须实现

抽象类将事物的共性的东西提取出来，抽象成一个高层的类。子类由其继承时，也拥有了这个超类的属性和方法。---也就实现了代码的复用了。

子类中也可加上自己所特有的属性和方法。----也就实现了多态

假如有两个程序员，两个在两个程序里都要用到一种功能，比如要取一个对象名。

甲自己做了一个方法叫getname，乙也作了一个方法叫qumingzi。如果两个人要去看对方的程序，那么这个方法要读懂是不是要有一个过程？

如果在公司里，有个抽象类，离面有个抽象方法较getName,公司规定，凡遇到这样的问题就实现这个方法。那么这两个人要读对方的代码是不是就容易了？？
假如很多人要买水果吃，吃的动作只有一个，但是有的人要用现金买，有的人用信用卡，有的人赊帐。要为每个人定义一个类，就要定义多个相同的吃的方法。
如果定义一个抽象类，在里面实现吃的方法，再做一个买的抽象方法。那每个人的类都从这个抽象类派生下来，只要实现买的方法即可，吃的方法就可以直接用父类的方法了。
如果要改吃的方法就不用改多个，只要改这个抽象类里的就行了。

抽象类往往用来表征对问题领域进行分析、设计中得出的抽象概念，是对一系列看上去不同，但是本质上相同的具体概念的抽象。具体分析如下：

1.因为抽象类不能实例化对象，所以必须要有子类来实现它之后才能使用。这样就可以把一些具有相同属性和方法的组件进行抽象，这样更有利于代码和程序的维护。

比如本科和研究生可以抽象成学生，他们有相同的属性和方法。这样当你对其中某个类进行修改时会受到父类的限制，这样就会提醒开发人员有些东西不能进行随意修改，这样可以对比较重要的东西进行统一的限制，也算是一种保护，对维护会有很大的帮助。

2.当又有一个具有相似的组件产生时，只需要实现该抽象类就可以获得该抽象类的那些属性和方法。

比如学校又新产生了专科生这类学生，那么专科生直接继承学生，然后对自己特有的属性和方法进行补充即可。这样对于代码的重用也是很好的体现。



=============================================  接口 ===========================================


什么情况下应该使用接口而不用抽象类. 


1. 需要实现多态

2. 要实现的方法(功能)不是当前类族的必要(属性).

3. 要为不同类族的多个类实现同样的方法(功能).


接口其中一个存在意义就是为了实现多态

而抽象类(继承) 也可以实现多态


 */